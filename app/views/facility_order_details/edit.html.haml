= content_for :head_content do
  = stylesheet_link_tag 'uploadify'
  = javascript_include_tag 'uploadify/jquery.uploadify.v2.1.0.min'
  = javascript_include_tag 'uploadify/swfobject'
  :javascript
    $(document).ready(function() {
      $('#file_upload').uploadify({
        'uploader'     : '#{ENV['RAILS_RELATIVE_URL_ROOT']}/javascripts/uploadify/uploadify.swf',
        'fileDataName' : 'fileData',
        'script'       : "#{add_uploader_file_path(current_facility, @order_detail.product.parameterize, @order_detail.product.url_name)}",
        'cancelImg'    : '#{ENV['RAILS_RELATIVE_URL_ROOT']}/javascripts/uploadify/cancel.png',
        'auto'         : false,
        'method'       : 'get',
        'multi'        : true,
        'folder'       : '/uploads',
        'onAllComplete' : function () {window.location.reload();},
        'scriptData'   : {
          '_nucore_session'    : '#{u cookies['_nucore_session']}',
          'authenticity_token' : encodeURIComponent('#{u form_authenticity_token if protect_against_forgery?}'),
          'file_type'          : 'sample_result',
          'order_detail_id'    : '#{@order_detail.id}'
        }
      });
      
      $("#quantity").change(function () {
        if($('#actual_cost').length == 0)
          return;

        $('#submit').attr('disabled', true);
        $.getJSON(
          "#{facility_order_order_detail_new_price_url(current_facility, @order, @order_detail)}?quantity=" + this.value,
          function(data) {
            $("#actual_cost").val(data[0].toFixed(2));
            $("#actual_subsidy").val(data[1].toFixed(2));
            $("#actual_total").html("$" + data[2].toFixed(2));
            $('#submit').attr('disabled', false);
          }
        );
      });

      $("input[type='text']").change(function () {
        if (this.id == 'actual_cost' || this.id == 'actual_subsidy') {
          $("#actual_total").html("$" + ($("#actual_cost")[0].value - $("#actual_subsidy")[0].value).toFixed(2));
        }
      });
    });

  - if @can_be_reconciled
    :javascript
      $(function() {
        $('#reconcile-note').hide();

        $('#order_detail_order_status_id').change(function() {
          $('#reconcile-note').toggle();
        });
      });

= content_for :h1 do
  = current_facility
= content_for :tabnav do
  - if @order_detail.problem_order?
    - tab = 'problem'
  - elsif @order_detail.in_dispute?
    - tab = 'disputed'
  - elsif @order_detail.complete?
    - tab = ''
  - else
    - tab = 'new'
  = render :partial => 'admin/shared/tabnav_order', :locals => { :secondary_tab => tab }

%h2== Edit Order # #{@order_detail}
= form_for(@order_detail, :as => :order_detail, :url => (@order_detail.in_dispute? ? facility_order_order_detail_resolve_dispute_path(current_facility, @order, @order_detail) : facility_order_order_detail_path(current_facility, @order, @order_detail)), :html => {:method => :put}) do |f|
  = f.error_messages
  .grid_6.alpha
    %ul.form
      %li
        %label Ordered At
        =h human_datetime(@order.ordered_at)
      %li
        %label Ordered For
        =h @order.user.full_name
      %li
        %label Ordered By
        =h @order.created_by_user.full_name
      - if @order_detail.fulfilled_at
        %li
          %label Fulfilled At
          =h human_datetime(@order_detail.fulfilled_at)
      %li
        %label Payment Source
        - html_opts=@in_open_journal ? { :disabled => 'disabled' } : {}
        = f.collection_select(:account_id, @order.user.account_users.active.collect{|au| au.account}, :id, :account_pretty, {}, html_opts)
      %li
        %label Assigned User
        - if @order_detail.complete?
          =h @order_detail.assigned_user ? @order_detail.assigned_user.full_name : 'Unassigned'
        - else
          = f.collection_select(:assigned_user_id, User.find_users_by_facility(current_facility), :id, :full_name, :prompt => 'Unassigned')
  .grid_6.omega.margin_bottom
    - # Dispute form
    - if @order_detail.in_dispute?
      .box.margin_bottom
        %h3 Resolve Dispute
        %p To resolve the dispute, please make the necessary changes and click "Resolve Dispute".
        %ul.form
          %li
            %label Disputed On
            =h human_datetime(@order_detail.dispute_at)
          %li
            %label Dispute Reason
            =h @order_detail.dispute_reason
          %li
            %label.required Resolution Notes
            = f.text_field :dispute_resolved_reason

    - # Dispute Results
    - if @order_detail.dispute_resolved_at
      .box.margin_bottom
        %h3 Dispute Information
        %ul.form
          %li
            %label Disputed On
            =h human_datetime(@order_detail.dispute_at)
          %li
            %label Dispute Reason
            =h @order_detail.dispute_reason
          %li
            %label Resolved At
            =h human_datetime(@order_detail.dispute_resolved_at)
          %li
            %label Resolution Notes
            =h @order_detail.dispute_resolved_reason
    
    - # Results Files
    - if @order_detail.product.is_a?(Service)
      .box
        %h3 Results Files
        - @results = @order_detail.file_uploads.sample_result.sort{|a,b| a.created_at <=> b.created_at}
        - if @results.empty?
          %p No results have been uploaded yet.
        - else
          %ul.form
            - i = 0
            - @results.each do |file_upload|
              %li
                == #{link_to("Results File #{i+=1}", file_upload.file.url)}:
                = human_datetime(file_upload.created_at)
                == - (#{link_to('Remove', remove_product_file_path(current_facility, @order_detail.product.parameterize, @order_detail.product, file_upload, :return_to => request.request_uri), :method => :delete, :confirm => 'Are you sure?')})
        %h3 Upload Results
        #file_upload Please enable Javascript and install Adobe Flash Player.
        %br
        = link_to "Start Upload", "javascript:$('#file_upload').uploadifyUpload();"
        == &nbsp;&nbsp;|&nbsp;&nbsp;
        = link_to "Clear Queue", "javascript:$('#file_upload').uploadifyClearQueue()"
  .clear
  - # Product table
  %table
    %tr
      %th{:colspan => 2} Quantity*/Product
      %th Status
      %th.currency= "#{@order_detail.cost_estimated? ? 'Estimated ' : '' }Cost"
      %th.currency= "#{@order_detail.cost_estimated? ? 'Estimated ' : '' }Adjustment"
      %th.currency= "#{@order_detail.cost_estimated? ? 'Estimated ' : '' }Total"
    %tr
      %td.centered
        - if @order_detail.product.is_a?(Instrument)
          =h @order_detail.quantity
        - else
          - html_opts={ :id => 'quantity', :size => 3 }
          - html_opts.merge!(:disabled => 'disabled') if @in_open_journal || @order_detail.reconciled?
          = f.text_field :quantity, html_opts
      %td
        %ul
          - product_name = order_detail_description(@order_detail)
          %li= product_name
          - if @order_detail.reservation
            %li.indented= link_to(@order_detail.reservation, edit_facility_order_order_detail_reservation_path(current_facility, @order, @order_detail, @order_detail.reservation))
          - if @order_detail.survey_completed?
            %li.indented= link_to('View Order Form', @order_detail.external_service_receiver.response_data, :target => '_blank')
          - unless @order_detail.file_uploads.template_result.empty?
            %li.indented= link_to('View Order File', @order_detail.file_uploads.template_result.first.file.url)
      - if @can_be_reconciled
        %td
          = f.collection_select(:order_status_id, [ OrderStatus.complete.first, OrderStatus.reconciled.first ], :id, :name_with_level)
          - if @order_detail.account.is_a?(NufsAccount) && @order_detail.journal
            == <br/><br/>#{link_to ' Remove From Journal', remove_from_journal_facility_order_order_detail_path(current_facility, @order, @order_detail)}
      - elsif @order_detail.complete? || @order_detail.reconciled?
        %td=h @order_detail.order_status
      - else
        %td= f.collection_select(:order_status_id, OrderStatus.non_protected_statuses(current_facility), :id, :name_with_level)
      - if @order_detail.product.is_a?(Instrument) && @order_detail.complete?
        - res = @order_detail.reservation
        - if res && res.actual_start_at && res.actual_end_at
          = render :partial => 'price_row', :locals => { :form => f }
        - elsif res.requires_but_missing_actuals?
          %td.centered{:colspan => '3'} You must enter actual start/end reservation times.
      - else 
        = render :partial => 'price_row', :locals => { :form => f }
      %tr
        %td{:colspan => '6'}
          %label.inline Note:
          - opts={ :style=> "width:200px" }
          - opts.merge!(:disabled => 'disabled') if @order_detail.reconciled?
          = f.text_field(:note, opts)
          - if @can_be_reconciled || @order_detail.reconciled?
            %span#reconcile-note.indented
              %label.inline Reconciliation Note:
              = f.text_field(:reconciled_note, :style=> "width:200px")

  - if @order_detail.cost_estimated?
    %p.footnote * Clicking 'Save' will update the cost estimate by quantity
  - elsif @order_detail.price_policy.nil?
    %p.footnote * Clicking 'Save' will attempt to estimate the cost by quantity
  - else
    %p.footnote * Changing the quantity will automatically update the price fields

  - if @order_detail.order_status.name == 'Complete'
    %p You <b>must</b> click "Save" to apply any changes made to the order.
    %ul.horiz
      - if @order_detail.price_policy.nil?
        %li= submit_tag 'Save', {:class => 'btn', :id => 'submit', :name => 'assign_price_policy'}
      - else
        %li= submit_tag 'Save', {:class => 'btn', :id => 'submit'}
      %li= link_to 'Cancel', show_problems_facility_orders_path
  - elsif @order_detail.in_dispute?
    %ul.horiz
      %li= submit_tag 'Resolve Dispute', {:class => 'btn', :id => 'submit'}
      %li= link_to 'Cancel', disputed_facility_orders_path
  - else
    %p You <b>must</b> click "Save" to apply any changes made to the order.
    %ul.horiz
      %li= submit_tag 'Save', {:class => 'btn', :id => 'submit'}
      %li= link_to 'Cancel', facility_orders_path

- if @order_detail.bundle
  -# BUNDLE TABLE
  %br
  %br
  %br
  %h3 Bundle Summary
  %p This order is part of a bundle.  Below is a summary of related bundle order line items.
  %table
    %tr
      %th Order #
      %th{:colspan => 2} Quantity/Product
      %th Status
      %th Assigned To
    - @order.order_details.find(:all, :conditions => {:group_id => @order_detail.group_id}).each do |od|
      - product_name = order_detail_description(od)
      %tr
        %td= link_to od, edit_facility_order_order_detail_path(current_facility, @order, od)
        %td= od.quantity
        %td= product_name
        %td=h od.order_status
        %td=h od.assigned_user.nil? ? '' : od.assigned_user.full_name
