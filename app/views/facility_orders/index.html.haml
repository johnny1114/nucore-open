= content_for :h1 do
  =h current_facility

= content_for :tabnav do
  = render :partial => 'admin/shared/tabnav_order', :locals => { :secondary_tab => 'new'}

- if @order_details.empty?
  %p.notice There are no "New" or "In Process" orders.
- else
  = form_tag(batch_update_facility_orders_path, :method => :post) do
    - facility_users = User.find_users_by_facility(current_facility)
    %table
      -## THE HEADER CONTROL ROW
      %tr.borderless
        %td{ :colspan => 4 }= link_to 'Select All', 'JavaScript:void(0);', :class => 'select_all'
        %td
        %td
        %td
          - if facility_users.empty?
            = select_tag :assigned_user_id, options_for_select([['Assign to...', nil], ['Unassign', 'unassign']]), :class => 'sync_select', :id => nil
          - else
            = select_tag :assigned_user_id, options_for_select(facility_users.map{ |u| [u.full_name, u.id] }.unshift(['Assign to...', nil], ['Unassign', 'unassign'])), :class => 'sync_select', :id => nil
        %td
          %select{ :name => "order_status_id", :class => 'sync_select', :id => nil }
            = options_for_select([['Status...', nil]])
            - OrderStatus.non_protected_statuses(current_facility).each do |os|
              = options_for_select([[os.name_with_level, os.id]])
        %td
          = submit_tag "Update Orders"
      -## THE HEADER ROW
      %tr
        %th
        %th.order_num_width.centered= sortable 'order_number', 'Order #'
        %th.ordered_on_width= sortable 'date', 'Ordered On'
        %th User Name
        %th{ :colspan => 2 }== Quantity / #{sortable 'product'}
        %th= sortable 'assigned_to'
        %th= sortable 'status'
        %th.currency Price
      -## THE DETAIL ROWS
      - @order_details.each do |od|
        - order = od.order
        %tr
          %td.centered= check_box_tag("order_detail_ids[]", od.id, false, {:class => 'toggle', :id => nil })
          %td.centered= link_to od, edit_facility_order_order_detail_path(current_facility, order, od)
          %td=h human_datetime(order.ordered_at)
          %td= order.user.full_name
          %td.centered= od.quantity
          %td
            %ul
              - product_name = order_detail_description(od)
              %li= product_name
              - if od.survey_completed?
                - receiver = od.external_service_receiver
                %li.indented= link_to 'View Order Form', receiver.response_data, :target => '_blank'
              - if !od.stored_files.template_result.empty?
                - od.stored_files.template_result.each do |stored_file|
                  %li.indented= link_to 'View Order File', stored_file.file.url
              - unless od.note.blank?
                %li
                  %i=h "Note: #{od.note}"
          %td=h od.assigned_user.nil? ? '' : od.assigned_user.full_name
          %td=h od.order_status.name
          - if od.cost_estimated?
            %td.estimated_cost.currency= show_estimated_total(od)
          - elsif od.price_policy.nil?
            %td.currency Unassigned
          - else
            %td.actual_cost.currency= show_actual_total(od)
      -## THE FOOTER CONTROL ROW
      %tr.borderless
        %td
        %td
        %td
        %td
        %td
        %td
        %td
          - if facility_users.empty?
            = select_tag :assigned_user_id, options_for_select([['Assign to...', nil], ['Unassign', 'unassign']]), :class => 'sync_select', :id => nil
          - else
            = select_tag :assigned_user_id, options_for_select(facility_users.map{ |u| [u.full_name, u.id] }.unshift(['Assign to...', nil], ['Unassign', 'unassign'])), :class => 'sync_select', :id => nil
        %td
          %select{ :name => "order_status_id", :class => 'sync_select', :id => nil }
            = options_for_select([['Status...', nil]])
            - OrderStatus.non_protected_statuses(current_facility).each do |os|
              = options_for_select([[os.name_with_level, os.id]])
        %td
          = submit_tag "Update Orders"
  = will_paginate(@order_details)
  = render :partial => '/price_display_footnote', :locals => { :admin => true }
