- content_for :h1 do
  =h current_facility

- content_for :tabnav do
  = render :partial => 'admin/shared/tabnav_order', :locals => { :secondary_tab => 'new'}

- if @order_details.empty?
  %p.notice There are no "New" or "In Process" orders.
- else
  - form_tag(batch_update_facility_orders_path, :method => :post) do
    - facility_users = User.find_users_by_facility(current_facility)
    %table
      -## THE HEADER CONTROL ROW
      %tr.borderless
        %td{ :colspan => 3 }= link_to 'Select All', 'JavaScript:void(0);', :class => 'select_all'
        %td
        %td
        %td
          - if facility_users.empty?
            = select_tag :assigned_user_id, options_for_select([['Assign to...', nil], ['Unassign', 'unassign']]), :class => 'sync_select', :id => nil
          - else
            = select_tag :assigned_user_id, options_for_select(facility_users.map{ |u| [u.full_name, u.id] }.unshift(['Assign to...', nil], ['Unassign', 'unassign'])), :class => 'sync_select', :id => nil
        %td
          %select{ :name => "order_status_id", :class => 'sync_select', :id => nil }
            = options_for_select([['Status...', nil]])
            - OrderStatus.non_protected_statuses(current_facility).each do |os|
              = options_for_select([[os.name_with_level, os.id]])
        %td
          = submit_tag "Update Orders"
      -## THE HEADER ROW
      %tr
        %th
        %th.centered= sortable 'order_number', 'Order #'
        %th= sortable 'date'
        %th{ :colspan => 2 }== Quantity / #{sortable 'product'}
        %th= sortable 'assigned_to'
        %th= sortable 'status'
        %th.currency Total
      -## THE DETAIL ROWS
      - @order_details.each do |od|
        - order = od.order
        %tr
          %td.centered= check_box_tag("order_detail_ids[]", od.id, false, {:class => 'toggle', :id => nil })
          %td.centered= link_to od, edit_facility_order_order_detail_path(current_facility, order, od)
          %td=h human_datetime(order.ordered_at)
          %td.centered= od.quantity
          %td
            %ul
              - product_name = (od.bundle ? "#{h od.bundle} &mdash; " : '') + h(od.product)
              %li= product_name
              - unless od.reservation.nil?
                - if od.reservation.can_edit?
                  %li.indented= link_to od.reservation, edit_facility_order_order_detail_reservation_path(current_facility, order, od, od.reservation)
                - else
                  %li.indented= link_to od.reservation, facility_order_order_detail_reservation_path(current_facility, order, od, od.reservation)
              - if od.survey_completed?
                - survey = od.response_set.survey
                %li.indented= link_to 'View Order Form', show_admin_order_survey_path(current_facility, order, od, survey.access_code, od.response_set.access_code)
              - if !od.file_uploads.template_result.empty?
                - od.file_uploads.template_result.each do |file_upload|
                  %li.indented= link_to 'View Order File', file_upload.file.url
          %td=h od.assigned_user.nil? ? '' : od.assigned_user.full_name
          %td=h od.order_status.name
          %td.currency=h number_to_currency(od.total)
      -## THE FOOTER CONTROL ROW
      %tr.borderless
        %td
        %td
        %td
        %td
        %td
        %td
          - if facility_users.empty?
            = select_tag :assigned_user_id, options_for_select([['Assign to...', nil], ['Unassign', 'unassign']]), :class => 'sync_select', :id => nil
          - else
            = select_tag :assigned_user_id, options_for_select(facility_users.map{ |u| [u.full_name, u.id] }.unshift(['Assign to...', nil], ['Unassign', 'unassign'])), :class => 'sync_select', :id => nil
        %td
          %select{ :name => "order_status_id", :class => 'sync_select', :id => nil }
            = options_for_select([['Status...', nil]])
            - OrderStatus.non_protected_statuses(current_facility).each do |os|
              = options_for_select([[os.name_with_level, os.id]])
        %td
          = submit_tag "Update Orders"
  = will_paginate(@order_details)
