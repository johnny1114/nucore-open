= content_for :h1 do
  =h current_facility
= content_for :sidebar do
  = render :partial => 'admin/shared/sidenav_product', :locals => {:sidenav_tab => @product.class.name.pluralize.downcase}
= content_for :tabnav do
  = render :partial => 'admin/shared/tabnav_product', :locals => {:secondary_tab => 'users'}

%h2=h @product
%h3 Approved Users

%p== This #{@product.class.name.downcase} requires a user to be approved before they may purchase the #{@product.class.name.downcase}.

%ul.horiz
  %li= link_to 'Add Approved User', send("new_facility_#{@product.class.name.downcase}_user_path", current_facility, @product)
- @show_levels = @product.respond_to?(:product_access_groups) and @product.product_access_groups.any?
- if @product_users.nil?
- elsif @product_users.empty?
  %p.notice== No users are currently approved.
- else
  = form_for @product, :url => facility_instrument_update_restrictions_path(@facility, @product), :method => :put do |f|
    %table
      %tr
        %th
        %th Name
        %th User Name
        %th Email
        %th= "#{ProductAccessGroup.model_name.human}" if @show_levels
      - @product_users.each do |product_user|
        - user = product_user.user
        %tr
          %td.centered= link_to "Remove", self.send("facility_#{@product.class.name.downcase}_user_path", current_facility, @product, user), :method => :delete, :confirm => "Are you sure you wish to remove this user from this #{@product.class.name.downcase}?"
          %td= link_to "#{user.last_name}, #{user.first_name}", [current_facility, user]
          %td= user.username
          %td= user.email
          - if @show_levels
            %td
              = f.fields_for :product_users, product_user, :index => product_user.id do |pu|
                = pu.select :product_access_group_id, options_from_collection_for_select(@product.product_access_groups, "id", "name", product_user.product_access_group_id), :include_blank => true
    = f.submit        
  = will_paginate(@product_users)